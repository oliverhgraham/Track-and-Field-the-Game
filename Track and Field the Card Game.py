# Track Coach the Game!! by Oliver Graham ograham
#thank you to all the play testers for your feedback!
# imports
from cmu_graphics import *
import random
import math
import copy


# character
class athlete:
    def __init__(self, name, power, technique, endurance, year=1):
        self.name = name
        self.power = power
        self.tec = technique
        self.endure = (
            endurance  # for events but also slows degredation throughout a meet
        )
        self.baseStates = [power, technique, endurance]
        self.trainged = [0, 0, 0]
        self.year = year
        self.injured = False
        self.highlighted = False
        self.selected = False
        self.tired = 0

    def __repr__(self):
        return (
            "athlete: "
            + self.name
            + " power: "
            + str(self.power)
            + " technique: "
            + str(self.tec)
            + " endurance: "
            + str(self.endure)
            + " year: "
            + str(self.year)
        )


class team:
    def __init__(self):
        self.team = []
        self.size = 10

    def makeRoster(self, runLength=0):
        self.team = []
        temp = []
        for i in range(self.size):
            temp.append(makeAthlete(runLength=runLength))
        self.team = temp

    def __repr__(self):
        temp = ""
        for i in self.team:
            temp += str(i) + "\n"
        return "your team: \n" + temp

    def newyear(self):
        for athlete in self.team:
            if athlete.year == 4:
                self.team.remove(athlete)
            else:
                athlete.year += 1
        if len(self.team) < 8:
            for i in range(random.randint(8 - len(self.team), 12 - len(self.team))):
                self.team.append(makeAthlete(0))
        elif len(self.team) < 12:
            for i in range(random.randint(0, 12 - len(self.team))):
                self.team.append(makeAthlete(0))

    def newMeet(self):
        for athlete in self.team:
            athlete.tired = 0


#  generate a athlete
def makeAthlete(year=-1, runLength=0):
    # list of names is generated by bingAI thanks bing I didn't want to have to make a really long list of names this would've taken forever
    popular_first_names = [
        "Liam",
        "Noah",
        "Oliver",
        "Elijah",
        "James",
        "William",
        "Benjamin",
        "Lucas",
        "Henry",
        "Alexander",
        "Olivia",
        "Emma",
        "Ava",
        "Sophia",
        "Isabella",
        "Mia",
        "Charlotte",
        "Amelia",
        "Harper",
        "Evelyn",
        "John",
        "Michael",
        "David",
        "Chris",
        "Sarah",
        "Ashley",
        "Emily",
        "Jessica",
        "Madison",
        "Aiden",
        "Ethan",
        "Logan",
        "Mason",
        "Sebastian",
        "Jack",
        "Daniel",
        "Matthew",
        "Samuel",
        "Joseph",
        "Jackson",
        "Aria",
        "Grace",
        "Chloe",
        "Ella",
        "Abigail",
        "Scarlett",
        "Zoey",
        "Lily",
        "Hannah",
        "Addison",
        "Samantha",
        "Luna",
        "Layla",
        "Ellie",
        "Riley",
        "Levi",
        "Owen",
        "Wyatt",
        "Gabriel",
        "Carter",
        "Julian",
        "Dylan",
        "Lincoln",
        "Leo",
        "Isaac",
        "Victoria",
        "Nora",
        "Hazel",
        "Mila",
        "Penelope",
        "Lillian",
        "Aubrey",
        "Eleanor",
        "Bella",
        "Savannah",
        "Christian",
        "Hunter",
        "Jameson",
        "Isaiah",
        "Grayson",
        "Nathan",
        "Aaron",
        "Adrian",
        "Eli",
        "Jonathan",
        "Lucy",
        "Paisley",
        "Brooklyn",
        "Aurora",
        "Skylar",
        "Genesis",
        "Naomi",
        "Elena",
        "Caroline",
        "Violet",
        "Mackenzie",
        "Autumn",
        "Kennedy",
        "Natalie",
        "Isabelle",
    ]
    if year == -1:
        return athlete(
            random.choice(popular_first_names),
            random.randint(1 + runLength, 10),
            random.randint(1 + runLength, 10),
            random.randint(1 + runLength, 10),
            random.randint(1 + runLength, 4),
        )
    else:
        return athlete(
            random.choice(popular_first_names),
            random.randint(1, 10),
            random.randint(1, 10),
            random.randint(1, 10),
            random.choice([1, 1, 1, 1, 2, 2, 2, 3, 3, 4]),
        )


# events


def m100(tfAthlete):
    result = (tfAthlete.power) * ((tfAthlete.endure / 11) ** (tfAthlete.tired**1.5))
    tfAthlete.tired += 1
    return result


def m200(tfAthlete):
    result = (tfAthlete.power * 0.8 + tfAthlete.endure * 0.2) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def m400(tfAthlete):
    result = (tfAthlete.power * 0.4 + tfAthlete.endure * 0.6) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def m800(tfAthlete):
    result = (tfAthlete.power * 0.3 + tfAthlete.endure * 0.7) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def m1600(tfAthlete):
    result = (tfAthlete.power * 0.2 + tfAthlete.endure * 0.8) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def m3200(tfAthlete):
    result = (tfAthlete.power * 0.1 + tfAthlete.endure * 0.9) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def discus(tfAthlete):
    result = (tfAthlete.power * 0.4 + tfAthlete.tec * 0.6) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def shotput(tfAthlete):
    result = (tfAthlete.power * 0.7 + tfAthlete.tec * 0.3) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def jav(tfAthlete):
    result = (tfAthlete.power * 0.3 + tfAthlete.tec * 0.7) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def long(tfAthlete):
    result = (tfAthlete.power * 0.7 + tfAthlete.tec * 0.3) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def high(tfAthlete):
    result = (tfAthlete.power * 0.6 + tfAthlete.tec * 0.4) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def polevault(tfAthlete):
    result = (tfAthlete.power * 0.3 + tfAthlete.tec * 0.7) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def h110(tfAthlete):
    result = (tfAthlete.power * 0.5 + tfAthlete.tec * 0.5) * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


def h400(tfAthlete):
    result = (tfAthlete.power * 0.2 + tfAthlete.endure * 0.3) + tfAthlete.tec * 0.5 * (
        (tfAthlete.endure / 11) ** (tfAthlete.tired**1.5)
    )
    tfAthlete.tired += 1
    return result


eventList = [
    m100,
    m200,
    m400,
    m800,
    m1600,
    m3200,
    discus,
    shotput,
    jav,
    long,
    high,
    polevault,
    h110,
    h400,
]


# trainings:
def enduranceTraining():
    for athlete in myteam.team:
        if athlete.selected:
            athlete.endure += random.choice(
                [
                    -1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                ]
            )
            if athlete.endure > 10:
                athlete.endure = 10
            if athlete.endure <= 1:
                athlete.endure = 1


def powerTraining():
    for athlete in myteam.team:
        if athlete.selected:
            athlete.power += random.choice(
                [
                    -1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                ]
            )
            if athlete.power > 10:
                athlete.power = 10
            if athlete.power <= 1:
                athlete.power = 1


def tecTraining():
    for athlete in myteam.team:
        if athlete.selected:
            athlete.tec += random.choice(
                [
                    -1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    2,
                ]
            )
            if athlete.tec > 10:
                athlete.tec = 10
            if athlete.tec <= 1:
                athlete.tec = 1


# output
def onAppStart(app):
    app.width = 1500
    app.height = 700
    app.game = False
    app.background = "darkGreen"
    app.help = False
    app.meet = False
    app.endureTrain = False
    app.tecTrain = False
    app.powerTrain = False
    app.eventsList = [
        "100M Dash",
        "200M Dash",
        "400M Dash",
        "800M Dash",
        "1600M",
        "3200M",
        "Discus",
        "Shotput",
        "Javelin",
        "Long Jump",
        "High Jump",
        "Polevault",
        "110M Hurdles",
        "400M Hurdles",
    ]
    app.currentEvent = 0
    app.playerScore = 0
    app.opponentScore = 0
    app.cardSelected = False
    app.selected = None
    app.win = "Good Job, You Won!"
    app.lose = "New Year, New Team, You Got It This Year!"
    app.outcome = None
    app.trainingMessage = "Pick one athlete for each type of training:"
    app.runLength = 0
    app.bestRunLength = 0
    app.compPickList = computerPick()
    pass


def redrawAll(app):
    if app.game:
        drawTrack(app)
        drawRect(20, 300, 400, 120, fill="gray")
        drawLabel("Run Length: " + str(app.runLength), 190, 350, fill="blue", size=50)
        drawLabel(
            "Best Run Length: " + str(app.bestRunLength), 190, 400, fill="blue", size=25
        )
        for i in range(len(myteam.team)):
            makeCard(
                i * 1500 / len(myteam.team) + ((0.5 * 1500 / len(myteam.team)) - 55),
                app.height - 210,
                myteam.team[i],
            )
        if app.meet:
            drawMeet(app)
        else:
            drawPractice(app)
    elif app.help:
        drawHelp(app)
    else:
        drawHome(app)


def drawMeet(app):  # need to do
    drawRect(app.width - 340, app.height / 2 + 30, 300, 50, fill="gray")
    drawLabel(
        "Your Score: " + str(app.playerScore),
        app.width - 190,
        app.height / 2 + 50,
        size=42,
        fill="blue",
    )
    drawRect(app.width - 340, app.height / 2 - 80, 300, 50, fill="gray")
    drawLabel(
        "Computer's Score: " + str(app.opponentScore),
        app.width - 190,
        app.height / 2 - 50,
        size=32,
        fill="red",
    )
    for i in range(len(otherTeam.team)):
        makeCard(
            i * 1500 / len(otherTeam.team) + ((0.5 * 1500 / len(otherTeam.team)) - 55),
            20,
            otherTeam.team[i],
            True,
        )
    drawRect(app.width / 2 - 400, app.height / 2 - 100, 800, 200, fill="gray")
    drawLabel(
        app.eventsList[app.currentEvent], app.width / 2 - 100, app.height / 2, size=100
    )
    makeCard(
        app.width / 2 + 200,
        app.height / 2 - 100,
        app.compPickList[app.currentEvent],
        True,
    )


def drawPractice(app):
    if app.outcome == "win":
        drawLabel(app.win, app.width / 2, 75, size=50, fill="blue")
    elif app.outcome == "lose":
        drawLabel(app.lose, app.width / 2, 75, size=50, fill="red")
    drawLabel(
        app.trainingMessage,
        app.width / 2,
        150,
        size=50,
        fill="white",
    )
    # tec
    if not app.tecTrain:
        drawRect(app.width / 2 - 400, app.height / 2 - 100, 200, 200, fill="red")
        drawLabel("Train Technique", app.width / 2 - 300, app.height / 2 - 80, size=20)
        drawLabel(
            "useful in events that require form:",
            app.width / 2 - 300,
            app.height / 2 - 40,
        )
        drawLabel("like hurdles and throws", app.width / 2 - 300, app.height / 2 - 30)

    # power
    if not app.powerTrain:
        drawRect(app.width / 2 - 100, app.height / 2 - 100, 200, 200, fill="green")
        drawLabel("Train Power", app.width / 2, app.height / 2 - 80, size=20)
        drawLabel(
            "useful in events that require strength:",
            app.width / 2,
            app.height / 2 - 40,
        )
        drawLabel("like shot put or sprinting", app.width / 2, app.height / 2 - 30)

    # endure
    if not app.endureTrain:
        drawRect(app.width / 2 + 200, app.height / 2 - 100, 200, 200, fill="blue")
        drawLabel("Train Endurance", app.width / 2 + 300, app.height / 2 - 80, size=20)
        drawLabel("useful in longer events", app.width / 2 + 300, app.height / 2 - 40)
        drawLabel("like long running events", app.width / 2 + 300, app.height / 2 - 30)
        drawLabel("or doing multiple events", app.width / 2 + 300, app.height / 2 - 20)

    pass


def drawHome(app):

    drawTrack(app)
    drawLabel(
        "Track and Field the Card Game",
        app.width / 2,
        app.height / 4,
        size=50,
        bold=True,
    )
    drawRect(app.width / 2 - 200, app.height / 2 - 100, 400, 200, fill="lightGray")
    drawLabel("PLAY!", app.width / 2, app.height / 2, size=120)
    drawRect(app.width / 2 - 100, app.height / 2 + 150, 200, 50, fill="lightGray")
    drawLabel("Help!", app.width / 2, app.height / 2 + 175, size=30)


def drawHelp(app):  # needs to be done
    drawRect(0, 0, app.width, app.height, fill="white")
    drawLabel("Welcome to Track and Field the Game!", app.width / 4, 20, size=40)
    drawLabel(
        "when you start the game you will be given a track and field team!",
        app.width / 4,
        50,
        size=20,
    )
    drawLabel(
        "you can train the players by clicking on them, then",
        app.width / 4,
        70,
        size=20,
    )
    drawLabel(
        "clicking on the training type you want to give them!",
        app.width / 4,
        90,
        size=20,
    )
    drawLabel(
        "your goal is to try to maintain a winning streak against the other teams,",
        app.width / 4,
        110,
        size=20,
    )
    drawLabel(
        "which only gets harder. When you lose, all your 4th years will graduate",
        app.width / 4,
        130,
        size=20,
    )
    drawLabel(
        " and you'll get some new athletes to replace them.",
        app.width / 4,
        150,
        size=20,
    )
    drawLabel(
        "when you use an athlete they'll get tired and will exponentially perform worse",
        app.width / 4,
        170,
        size=20,
    )
    drawLabel(
        "if they have high endurance they'll perform better for longer",
        app.width / 4,
        190,
        size=20,
    )
    drawLabel(
        " there are 14 events: " + str(app.eventsList[0:4]), app.width / 4, 210, size=20
    )
    drawLabel(str(app.eventsList[4:10]), app.width / 4, 230, size=20)
    drawLabel(str(app.eventsList[10:14]), app.width / 4, 250, size=20)
    drawLabel(
        "different events require different amounts of each attribute to perform well",
        app.width / 4,
        270,
        size=20,
    )
    drawLabel("after the practice you'll be put in a meet",app.width/4,290,size = 20)
    drawLabel("you'll have to select whatever athlete you think will perform the best",app.width/4,310,size = 20)
    drawLabel("Hints:",app.width*3/4,20,size = 40)
    drawLabel(
        "in events that require speed or strength high power stat is useful", app.width*3/4,50,size = 20
    )
    drawLabel(
        "having more endurance helps in long running events and in not getting as tired",app.width*3/4,70,size = 20
    )
    drawLabel(
        "careful training doesn't always improve the athlete",app.width*3/4,90,size = 20
    )
    drawLabel(
        "as you progress the other team will only get better",app.width*3/4,110,size = 20
    )
    drawLabel(
        "technique is useful for jumping, throwing, and hurdle events",app.width*3/4,130,size = 20
    )
    drawLabel(
        "when in the game you can always press escape to go back to the home screen",app.width/2,400,size = 40
    )
    drawLabel(
        "(in the help screen just click anywhere)",app.width/2,430,size = 20
    )
    drawLabel(
        "most importantly have fun!",app.width/2,500,size = 40
    )
def startGame(app):
    pass


def drawTrack(app):
    for i in range(10):
        drawArc(
            app.height / 2,
            app.height / 2,
            app.height - 25 * i,
            app.height - 25 * i,
            90,
            180,
            border="white",
        )
        drawArc(
            app.width - app.height / 2,
            app.height / 2,
            app.height - 25 * i,
            app.height - 25 * i,
            -90,
            180,
            border="white",
        )
        if i == 9:
            drawRect(
                app.height / 2 - 2.5,
                0 + 12.5 * i,
                app.width - app.height + 5,
                app.height - 25 * i,
                fill="darkGreen",
            )
            drawCircle(app.width / 2, app.height / 2, 75)
            drawLine(
                app.height / 2,
                9 * 12.5,
                app.height / 2 + app.width - app.height,
                9 * 12.5,
                fill="white",
                lineWidth=2,
            )
            drawLine(
                app.height / 2,
                app.height - 9 * 12.5,
                app.height / 2 + app.width - app.height,
                app.height - 9 * 12.5,
                fill="white",
                lineWidth=2,
            )
        else:
            drawRect(
                app.height / 2,
                0 + 12.5 * i,
                app.width - app.height,
                app.height - 25 * i,
                border="white",
            )


def makeCard(x, y, athlete, AI=False):
    color = "black"
    cardColor = RGB(athlete.tec * 25.5, athlete.power * 25.5, athlete.endure * 25.5)
    if athlete.selected:
        drawRect(x, y, 110, 200, fill=cardColor, borderWidth=20, border="gold")
    elif athlete.highlighted:
        drawRect(x, y, 110, 200, fill=cardColor, borderWidth=10, border="gold")
    else:
        drawRect(x, y, 110, 200, fill=cardColor)
    if (athlete.tec * 25.5 + athlete.power * 25.5 + athlete.endure * 25.5) / 3 <= 150:
        color = "white"
    if not AI:
        drawLabel(athlete.name, x + 55, y + 5, align="top", fill=color, size=20)
        drawLabel(
            "Year: " + str(athlete.year),
            x + 100,
            y + 30,
            align="top",
            fill=color,
            size=20,
            rotateAngle=90,
        )
        drawRect(x + 20, y + 25, 70, 70, fill="white")
        drawCircle(x + 55, y + 60, 30, fill="yellow")
        drawCircle(x + 55, y + 65, 20, fill="pink")
        drawRect(x + 35, y + 45, 40, 20, fill="yellow")
        drawCircle(x + 47, y + 52, 10, fill="white")
        drawCircle(x + 63, y + 52, 10, fill="white")
        drawCircle(x + 63, y + 52, 5)
        drawCircle(x + 47, y + 52, 5)
        drawLabel(
            "technique: " + str(athlete.tec), x + 55, y + 100, align="top", fill=color
        )
        drawRect(x + 5, y + 120, athlete.tec * 10, 10, fill="red", border=color)
        drawLabel(
            "power: " + str(athlete.power), x + 55, y + 133, align="top", fill=color
        )
        drawRect(x + 5, y + 150, athlete.power * 10, 10, fill="green", border=color)
        drawLabel(
            "endurance: " + str(athlete.endure),
            x + 55,
            y + 166,
            align="top",
            fill=color,
        )
        drawRect(x + 5, y + 180, athlete.endure * 10, 10, fill="blue", border=color)
    if AI:
        drawRect(x + 20, y + 25, 70, 70, fill="white")
        drawCircle(x + 55, y + 60, 30, fill="yellow")
        drawRect(x + 35, y + 75, 40, 5, fill="red")
        drawCircle(x + 47, y + 52, 10, fill="white")
        drawCircle(x + 63, y + 52, 10, fill="white")
        drawCircle(x + 63, y + 52, 5)
        drawCircle(x + 47, y + 52, 5)
        drawLabel("technique: ", x + 55, y + 100, align="top", fill=color)
        drawRect(
            x + 5,
            y + 120,
            athlete.tec * 10 + (random.random() - 0.5) * 2,
            10,
            fill=gradient("red", cardColor, start="left"),
        )
        drawLabel("power: ", x + 55, y + 133, align="top", fill=color)
        drawRect(
            x + 5,
            y + 150,
            athlete.power * 10 + (random.random() - 0 / 5) * 2,
            10,
            fill=gradient("green", cardColor, start="left"),
        )
        drawLabel("endurance: ", x + 55, y + 166, align="top", fill=color)
        drawRect(
            x + 5,
            y + 180,
            athlete.endure * 10 + (random.random() - 0 / 5) * 2,
            10,
            fill=gradient("blue", cardColor, start="left"),
        )
    if athlete.tired <= 5:
        drawRect(
            x + 5,
            y + 10,
            10,
            (athlete.tired + 1) * 18,
            fill=rgb(51 * athlete.tired, 0, 0),
            border=color,
        )
    else:
        drawRect(x + 5, y + 10, 10, 100, fill="red", border=color)
    drawLabel(
        "tired",
        x + 10,
        y + 30,
        align="top",
        fill=color,
        size=20,
        rotateAngle=90,
    )


def main():
    runApp()


# AI


def computerPick():
    bestList = []
    bestScore = 0
    best = None
    dOfRepeats = {}
    for event in eventList:
        for athlete in otherTeam.team:
            if best == None:
                best = athlete
            elif event(athlete) > event(best):
                best = athlete
            athlete.tired = 0
        bestList.append(best)
        if best in dOfRepeats:
            dOfRepeats[best] = dOfRepeats[best] + 1
        else:
            dOfRepeats[best] = 1
        best = None
        bestScore = 0
    result = greedyPick(bestList, dOfRepeats)
    for athlete in otherTeam.team:
        athlete.tired = 0
    return result


def greedyPick(
    initial, dor
):  # idea of greedy method was given to me by a friend but all code and emplementation is my own
    dTiredLevel = {}
    """for athlete in otherTeam.team:
        if athlete in initial:
            dTiredLevel[athlete] = 1
        else:
            dTiredLevel[athlete] = 0
    for i in range(max(dor.values())):
        for event in range(len(eventList)):
            best = None
            for athlete in otherTeam.team:
                if best == None:
                    best = athlete
                elif eventList[event](athlete) > eventList[event](best):
                    best = athlete
                best.tired = dTiredLevel[best]
                athlete.tired = dTiredLevel[athlete]
            initial.pop(event)
            initial.insert(event, best)
            for athlete in set(initial):
                dTiredLevel[athlete] = dTiredLevel[athlete] +1"""
    for athlete in otherTeam.team:
        dTiredLevel[athlete] = 0
        if athlete in initial:
            dTiredLevel[athlete] = dTiredLevel[athlete] +1
    for i in range(100):
        for event in range(len(eventList)):
            best = None
            for athlete in otherTeam.team:
                if best == None:
                    best = athlete
                elif eventList[event](athlete) > eventList[event](best):
                    best = athlete
                best.tired = dTiredLevel[best]
                athlete.tired = dTiredLevel[athlete]
            initial.pop(event)
            initial.insert(event, best)
            for athlete in initial:
                dTiredLevel[athlete] = 0
            for athlete in initial:
                dTiredLevel[athlete] = dTiredLevel[athlete] +1
    print(len(initial))
    return initial


# input
def onMousePress(app, mouseX, mouseY):
    if app.help:
        app.help = not app.help
    if not app.game:
        if (
            app.width / 2 - 200 < mouseX < app.width / 2 + 200
            and app.height / 2 - 100 < mouseY < app.height / 2 + 100
        ):
            app.game = True
        if (
            app.width / 2 - 100 < mouseX < app.width / 2 + 100
            and app.height / 2 + 150 < mouseY < app.height / 2 + 200
        ):
            app.help = True
    else:
        if not app.meet:
            for athlete in myteam.team:
                athlete.tired = 0
            if (
                app.width / 2 - 400 < mouseX < app.width / 2 - 200
                and app.height / 2 + 120 > mouseY > app.height / 2 - 80
                and not app.tecTrain
                and app.cardSelected
            ):
                tecTraining()
                app.tecTrain = True
            elif (
                app.width / 2 - 100 < mouseX < app.width / 2 + 100
                and app.height / 2 + 120 > mouseY > app.height / 2 - 80
                and not app.powerTrain
                and app.cardSelected
            ):
                powerTraining()
                app.powerTrain = True
            elif (
                app.width / 2 + 200 < mouseX < app.width / 2 + 400
                and app.height / 2 + 120 > mouseY > app.height / 2 - 80
                and not app.endureTrain
                and app.cardSelected
            ):
                enduranceTraining()
                app.endureTrain = True
            if app.tecTrain and app.powerTrain and app.endureTrain:
                myteam.newMeet
                app.meet = True
        else:

            if (
                (app.width / 2) - 400 < mouseX < (app.width / 2) + 400
                and (app.height / 2) - 100 < mouseY < (app.height / 2) + 100
                and app.cardSelected
            ):
                if app.selected != None:
                    if (eventList[app.currentEvent](app.selected)) > eventList[
                        app.currentEvent
                    ](app.compPickList[app.currentEvent]):
                        print("you: " + str(eventList[app.currentEvent](app.selected)))
                        print(
                            "them: "
                            + str(
                                eventList[app.currentEvent](
                                    app.compPickList[app.currentEvent]
                                )
                            )
                        )
                        app.playerScore += 1
                        print("you win")
                    elif (eventList[app.currentEvent](app.selected)) == eventList[
                        app.currentEvent
                    ](app.compPickList[app.currentEvent]):
                        app.playerScore += 0.5
                        app.opponentScore += 0.5
                        print("you tied")
                    else:
                        print("you: " + str(eventList[app.currentEvent](app.selected)))
                        print(
                            "them: "
                            + str(
                                eventList[app.currentEvent](
                                    app.compPickList[app.currentEvent]
                                )
                            )
                        )
                        app.opponentScore += 1
                        print("you lose")
                    print(app.currentEvent)
                    print(len(app.eventsList))
                    if app.currentEvent < len(app.eventsList) - 1:
                        app.currentEvent += 1
                    else:
                        print("meet Over")
                        if app.bestRunLength < app.runLength:
                            app.bestRunLength = app.runLength
                        if app.opponentScore > app.playerScore:
                            app.outcome = "lose"
                            myteam.newyear()
                            app.runLength = 0
                        else:
                            app.outcome = "win"
                            app.runLength += 1

                        app.opponentScore = 0
                        #otherTeam.makeRoster()
                        if app.runLength < 8:
                            otherTeam.makeRoster(runLength=app.runLength)
                        else:
                            otherTeam.makeRoster(runLength=8)
                        app.compPickList = computerPick()
                        app.playerScore = 0
                        app.currentEvent = 0
                        app.meet = False
                        app.endureTrain = False
                        app.tecTrain = False
                        app.powerTrain = False

        for i in range(len(myteam.team)):
            if (
                i * 1500 / len(myteam.team) + ((0.5 * 1500 / len(myteam.team)) - 55)
                < mouseX
                < i * 1500 / len(myteam.team)
                + ((0.5 * 1500 / len(myteam.team)) - 55)
                + 110
                and mouseY > 480
            ):
                if myteam.team[i].selected == True:
                    app.cardSelected = False
                    myteam.team[i].selected = False
                    app.selected = None
                else:
                    app.cardSelected = True
                    for athlete in myteam.team:
                        athlete.selected = False
                    myteam.team[i].selected = True
                    app.selected = myteam.team[i]

                    break
            else:
                app.selected = None
                app.cardSelected = False
                myteam.team[i].selected = False


def onMouseMove(app, mouseX, mouseY):
    for i in range(len(myteam.team)):
        if (
            i * 1500 / len(myteam.team) + ((0.5 * 1500 / len(myteam.team)) - 55)
            < mouseX
            < i * 1500 / len(myteam.team) + ((0.5 * 1500 / len(myteam.team)) - 55) + 110
            and mouseY > 480
        ):
            myteam.team[i].highlighted = True
        else:
            myteam.team[i].highlighted = False


def onKeyPress(app, key):  # only escape to home works
    if key == "escape":
        app.game = False


# running
myteam = team()
myteam.makeRoster()
otherTeam = team()
otherTeam.makeRoster()
main()
